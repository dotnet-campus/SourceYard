<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 用于给多框架存放各个框架的信息的文件的文件夹，各个框架将会在写入到各自的文件里面 -->
    <!-- 选择 BaseIntermediateOutputPath 是因为开发者可以配置不同的框架采用不同的 obj 文件夹，但是对于不同的框架，大部分都是使用相同的 BaseIntermediateOutputPath 文件夹 -->
    <_SourceYardMultiTargetingPackageInfoFolder>$(BaseIntermediateOutputPath)$(Configuration)\SourceYardMultiTargetingPackageInfoFolder\</_SourceYardMultiTargetingPackageInfoFolder>
    <!-- 
	     输出形式如：
		       - obj\Debug\SourceYardMultiTargetingPackageInfoFolder\net45.txt
		       - obj\Debug\SourceYardMultiTargetingPackageInfoFolder\net5.0.txt
	  -->
  </PropertyGroup>
  
  <!-- 打包核心 -->

  <Target Name="_SourceYardPrivateAssets"
          BeforeTargets="CollectPackageReferences">
    <!-- 读取信息，解决 https://github.com/dotnet/sdk/issues/12777 -->
    <ItemGroup>
      <_PackageReferenceVersion
          Include="Name='%(PackageReference.Identity)' Version='%(PackageReference.Version)' PrivateAssets='%(PackageReference.PrivateAssets)'">
      </_PackageReferenceVersion>
    </ItemGroup>
  </Target>

  <Target Name="_SourceYardFrameworkAssets"
          AfterTargets="ResolveReferences">
    <ItemGroup>
      <!-- 参考 [增加分版本的package引用和framework引用 by Zhuangkh · Pull Request #111 · dotnet-campus/SourceYard](https://github.com/dotnet-campus/SourceYard/pull/111 ) -->
      <_TfmSpecificFrameworkAssemblyReferences Include="@(ReferencePath->'%(OriginalItemSpec)')"
                                               Condition="'%(ReferencePath.Pack)' != 'false' AND '%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}'">
      </_TfmSpecificFrameworkAssemblyReferences>
    </ItemGroup>
  </Target>

  <!--打包第一步，将会多个框架分别执行-->
  <Target Name="SourceYardStep1">
    <PropertyGroup>
      <!-- 用于将各个框架的信息写入的文件 -->
      <_SourceYardMultiTargetingPackageInfoFile>$(_SourceYardMultiTargetingPackageInfoFolder)$(TargetFramework).txt</_SourceYardMultiTargetingPackageInfoFile>

      <!-- 这里不能使用 $(PackingDirectory) 属性，原因是此属性在未打包时是空 -->
      <!-- 对于多框架来说，这里的 IntermediateOutputPath 路径格式如 obj\Debug\net45\ -->
      <SourcePackingDirectory>$(IntermediateOutputPath)SourcePacking\</SourcePackingDirectory>

      <CompileTextFile>$(SourcePackingDirectory)CompileFile.txt</CompileTextFile>
      <ResourceTextFile>$(SourcePackingDirectory)ResourceFile.txt</ResourceTextFile>
      <ContentTextFile>$(SourcePackingDirectory)ContentFile.txt</ContentTextFile>
      <NoneTextFile>$(SourcePackingDirectory)NoneFile.txt</NoneTextFile>
      <EmbeddedResourceTextFile>$(SourcePackingDirectory)EmbeddedResourceFile.txt</EmbeddedResourceTextFile>
      <PageTextFile>$(SourcePackingDirectory)PageFile.txt</PageTextFile>
      <ApplicationDefinitionTextFile>$(SourcePackingDirectory)ApplicationDefinitionFile.txt</ApplicationDefinitionTextFile>

      <DescriptionFile>$(SourcePackingDirectory)DescriptionFile.txt</DescriptionFile>
      <CopyrightFile>$(SourcePackingDirectory)CopyrightFile.txt</CopyrightFile>
      <PackageReleaseNotesFile>$(SourcePackingDirectory)PackageReleaseNotesFile.txt</PackageReleaseNotesFile>

      <PackageReferenceVersionFile>$(SourcePackingDirectory)PackageReferenceVersionFile.txt</PackageReferenceVersionFile>
      <FrameworkReferenceVersionFile>$(SourcePackingDirectory)FrameworkReferenceVersionFile.txt</FrameworkReferenceVersionFile>
      <SourceProjectPackageFile>$(SourcePackingDirectory)SourceProjectPackageFile.txt</SourceProjectPackageFile>
      <SourceYardPackageReferenceFile>$(SourcePackingDirectory)SourceYardPackageReferenceFile.txt</SourceYardPackageReferenceFile>

      <!-- 表示不要包含的引用依赖列表 -->
      <SourceYardExcludePackageReferenceFile>$(SourcePackingDirectory)SourceYardExcludePackageReferenceFile.txt</SourceYardExcludePackageReferenceFile>
      <!-- 表示不要包含的文件列表 -->
      <SourceYardExcludeFileItemFile>$(SourcePackingDirectory)SourceYardExcludeFileItemFile.txt</SourceYardExcludeFileItemFile>

      <SourceYardCompilePackageFile>$(SourcePackingDirectory)SourceYardCompilePackageFile.txt</SourceYardCompilePackageFile>
      <SourceYardResourcePackageFile>$(SourcePackingDirectory)SourceYardResourcePackageFile.txt</SourceYardResourcePackageFile>
      <SourceYardContentPackageFile>$(SourcePackingDirectory)SourceYardContentPackageFile.txt</SourceYardContentPackageFile>
      <SourceYardNonePackageFile>$(SourcePackingDirectory)SourceYardNonePackageFile.txt</SourceYardNonePackageFile>
      <SourceYardEmbeddedResourcePackageFile>$(SourcePackingDirectory)SourceYardEmbeddedResourcePackageFile.txt</SourceYardEmbeddedResourcePackageFile>
    </PropertyGroup>

    <ItemGroup>
      <!-- 这个 ItemGroup 里面存放的是加入到额外的文件引用里面 -->
      <!-- 用于支持附加文件功能 -->
      <!-- 这里面的 ItemGroup 所有的值最终将会写入到 SourceYardCompilePackageFile 文件 -->
      <!-- 此文件格式为每行一个文件的配置，包括文件所在的源代码路径以及放在源代码包的相对路径 -->
      <!-- 格式如下： 源代码路径 | 放在源代码包的相对路径 -->
      <!-- 如在源代码里面的 C:\dotnet-campus\F1\A.cs 需要放在源代码包里面的 F2\A1.cs 文件 -->
      <!-- 写入到文件内容如下：C:\dotnet-campus\F1\A.cs|F2\A1.cs -->
      <_SourceYardCompilePackage Include="%(SourceYardCompile.Identity)|%(SourceYardCompile.SourcePackagePath)"/>
      <_SourceYardResourcePackage Include="%(SourceYardResource.Identity)|%(SourceYardResource.SourcePackagePath)"/>
      <_SourceYardContentPackage Include="%(SourceYardContent.Identity)|%(SourceYardContent.SourcePackagePath)"/>
      <_SourceYardNonePackage Include="%(SourceYardNone.Identity)|%(SourceYardNone.SourcePackagePath)"/>
      <_SourceYardEmbeddedResourcePackage Include="%(SourceYardEmbeddedResource.Identity)|%(SourceYardEmbeddedResource.SourcePackagePath)"/>

      <!-- 这是给 SourceFusion 预编译生成的文件加入打包 -->
      <!-- 预编译生成的文件所在源代码包的路径和所在项目路径相同，都是 _SourceFusionIncludedCompileFile.Identity 这个值 -->
      <_SourceYardForSourceFusionCompilePackage Include="%(_SourceFusionIncludedCompileFile.Identity)|%(_SourceFusionIncludedCompileFile.Identity)"/>
    </ItemGroup>

    <PropertyGroup>

      <SourceYardAuthors Condition="$(Authors) != ''">--Authors "$(Authors)"</SourceYardAuthors>

      <!-- 这部分长度太长会让命令行无法输入
			<SourceYardRepositoryUrl Condition="$(RepositoryUrl) != ''">RepositoryUrl "$(RepositoryUrl)"</SourceYardRepositoryUrl>
            <SourceYardRepositoryType Condition="$(RepositoryType) != ''">RepositoryType "$(RepositoryType)"</SourceYardRepositoryType>
            <SourceYardPackageProjectUrl Condition="$(PackageProjectUrl) != ''">PackageProjectUrl "$(PackageProjectUrl)"</SourceYardPackageProjectUrl>-->
      <SourceYardPackageLicenseUrl Condition="$(PackageLicenseUrl) != ''">--PackageLicenseUrl "$(PackageLicenseUrl) "</SourceYardPackageLicenseUrl>

      <SourceYardCopyright Condition="$(Copyright) != ''">--CopyrightFile "$(CopyrightFile)"</SourceYardCopyright>

      <SourceYardPackageVersion Condition="$(PackageVersion) != ''">-v $(PackageVersion)</SourceYardPackageVersion>

      <SourceYardDescription Condition="$(Description) != ''">--DescriptionFile "$(DescriptionFile) "</SourceYardDescription>

      <SourceYardTitle Condition="$(Title) != ''">--Title "$(Title)"</SourceYardTitle>
      <SourceYardOwner Condition="$(Owner) != ''">--Owner "$(Owner)"</SourceYardOwner>
      <SourceYardPackageTags Condition="$(PackageTags) != ''">--PackageTags "$(PackageTags) "</SourceYardPackageTags>
      <SourceYardPackageReleaseNotes Condition="$(PackageReleaseNotes) != ''"> --PackageReleaseNotesFile $(PackageReleaseNotesFile)</SourceYardPackageReleaseNotes>
      <SourceYardPackageId Condition="'$(PackageId)' != ''">--PackageId "$(PackageId) "</SourceYardPackageId>

      <SourceMSBuildProjectFullPath>-p "$(MSBuildProjectFullPath) "</SourceMSBuildProjectFullPath>
     
      <SourcePackageOutputPath Condition="'$(PackageOutputPath)' != ''">-n "$(PackageOutputPath) "</SourcePackageOutputPath>
      <SourcePackageOutputPath Condition="'$(PackageOutputPath)' == '' and $(OutputPath) != ''">-n "$(OutputPath) "</SourcePackageOutputPath>

    </PropertyGroup>

    <Message Text="Finish SourceYardStep1"></Message>

  </Target>
  
  <!--打包第二步，将会多个框架分别执行-->
  <Target Name="SourceYardStep2">
    
    <MakeDir Condition="!Exists($(_SourceYardMultiTargetingPackageInfoFolder))" Directories="$(_SourceYardMultiTargetingPackageInfoFolder)"></MakeDir>

    <MakeDir Condition="!Exists($(SourcePackingDirectory))" Directories="$(SourcePackingDirectory)"></MakeDir>

    <!-- 写入框架信息 -->
    <!--为了支持多框架项目，需要将当前的路径写入保存-->
    <WriteLinesToFile File="$(_SourceYardMultiTargetingPackageInfoFile)" Lines="$(SourcePackingDirectory)" Overwrite="true"/>

    <WriteLinesToFile File="$(CompileTextFile)" Lines="@(Compile)" Overwrite="true" />
    <WriteLinesToFile File="$(ResourceTextFile)" Lines="@(Resource)" Overwrite="true" />
    <WriteLinesToFile File="$(ContentTextFile)" Lines="@(Content)" Overwrite="true" />
    <WriteLinesToFile File="$(NoneTextFile)" Lines="@(None)" Overwrite="true" />
    <WriteLinesToFile File="$(EmbeddedResourceTextFile)" Lines="@(EmbeddedResource)" Overwrite="true" />
    <WriteLinesToFile File="$(PageTextFile)" Lines="@(Page)" Overwrite="true" />
    <WriteLinesToFile File="$(ApplicationDefinitionTextFile)" Lines="@(ApplicationDefinition)" Overwrite="true" />

    <WriteLinesToFile File="$(DescriptionFile)" Lines="$(Description)" Overwrite="true"></WriteLinesToFile>
    <WriteLinesToFile File="$(CopyrightFile)" Lines="$(Copyright)" Overwrite="true"></WriteLinesToFile>
    <WriteLinesToFile File="$(PackageReleaseNotesFile)" Lines="$(PackageReleaseNotes)" Overwrite="true"></WriteLinesToFile>

    <!-- 写入通用的信息 -->
    <!-- 多段写入之前需要先删除文件 -->
    <Delete Files="$(SourceProjectPackageFile)" Condition="Exists($(SourceProjectPackageFile))"></Delete>
    <!-- 先写入RepositoryType的值，解析时将会根据此值顺序解析 -->
    <WriteLinesToFile File="$(SourceProjectPackageFile)" Lines=">;RepositoryType;$(RepositoryType);"></WriteLinesToFile>
    <WriteLinesToFile File="$(SourceProjectPackageFile)" Lines=">;PackageProjectUrl;$(PackageProjectUrl);"></WriteLinesToFile>
    <WriteLinesToFile File="$(SourceProjectPackageFile)" Lines=">;RepositoryUrl;$(RepositoryUrl);"></WriteLinesToFile>

    <WriteLinesToFile File="$(PackageReferenceVersionFile)" Lines="@(_PackageReferenceVersion)" Overwrite="true" />
    <WriteLinesToFile File="$(FrameworkReferenceVersionFile)" Lines="@(_TfmSpecificFrameworkAssemblyReferences)" Overwrite="true"/>
    <WriteLinesToFile File="$(SourceYardPackageReferenceFile)" Lines="$(SourceYardPackageReference)" Overwrite="true"></WriteLinesToFile>

    <WriteLinesToFile File="$(SourceYardCompilePackageFile)" Lines="@(_SourceYardCompilePackage)" Overwrite="true"></WriteLinesToFile>
    <!-- 这是给 SourceFusion 预编译生成的文件加入打包，写入在 SourceYardCompilePackageFile 文件 -->
    <WriteLinesToFile File="$(SourceYardCompilePackageFile)" Lines="@(_SourceYardForSourceFusionCompilePackage)"></WriteLinesToFile>
    <!-- 写入表示不要包含的引用依赖列表，这部分的 NuGet 包依赖将会忽略 -->
    <WriteLinesToFile File="$(SourceYardExcludePackageReferenceFile)"
                      Lines="@(SourceYardExcludePackageReference)"
                      Overwrite="true"/>
    <!-- 写入表示不要被源代码包引用的文件项，这部分的文件将不会被放入源代码 -->
    <WriteLinesToFile File="$(SourceYardExcludeFileItemFile)"
                      Lines="@(SourceYardExcludeFileItem)"
                      Overwrite="true"/>

    <WriteLinesToFile File="$(SourceYardResourcePackageFile)" Lines="@(_SourceYardResourcePackage)" Overwrite="true"></WriteLinesToFile>
    <WriteLinesToFile File="$(SourceYardContentPackageFile)" Lines="@(_SourceYardContentPackage)" Overwrite="true"></WriteLinesToFile>
    <WriteLinesToFile File="$(SourceYardNonePackageFile)" Lines="@(_SourceYardNonePackage)" Overwrite="true"></WriteLinesToFile>
    <WriteLinesToFile File="$(SourceYardEmbeddedResourcePackageFile)" Lines="@(_SourceYardEmbeddedResourcePackage)" Overwrite="true"></WriteLinesToFile>

    <Message Text="Finish SourceYardStep2"></Message>
  </Target>
  
  <!--打包第三步，无论多框架还是单框架只执行一次-->
  <Target Name="SourceYardStep3">
 
    <!-- 开发者自己有指定路径，但是路径里面不存在应用 -->
    <Error Text="Can not find SourceYardApplicationFilePath $(SourceYardApplicationFilePath)" Condition="'$(SourceYardApplicationFilePath)' != '' And !Exists($(SourceYardApplicationFilePath))"/>

    <PropertyGroup Condition="'$(SourceYardApplicationFilePath)' == ''">
      <!-- 给定默认的 SourceYard 路径名 -->
      <!-- 我们使用 $(MSBuildRuntimeType) 来判断编译器是 .NET Core 的还是 .NET Framework 的。
         然后选用对应的工具。-->
      <!--The type of the runtime that is currently executing. Introduced in MSBuild 15. Value may be undefined (prior to MSBuild 15), Full indicating that MSBuild is running on the desktop .NET Framework, Core indicating that MSBuild is running on .NET Core (for example in dotnet build), or Mono indicating that MSBuild is running on Mono.-->
      <SourceYardApplicationFilePath Condition=" '$(MSBuildRuntimeType)' != 'Core'">$(MSBuildThisFileDirectory)..\tools\net45\dotnetCampus.SourceYard.exe</SourceYardApplicationFilePath>
      <SourceYardApplicationFilePath Condition=" '$(MSBuildRuntimeType)' == 'Core'">dotnet $(MSBuildThisFileDirectory)../tools/netcoreapp2.0/dotnetCampus.SourceYard.dll</SourceYardApplicationFilePath>
    </PropertyGroup>

    <Exec
        Command="$(SourceYardApplicationFilePath) $(SourceMSBuildProjectFullPath)  $(SourcePackageOutputPath) $(SourceYardPackageVersion) $(SourceYardAuthors) $(SourceYardRepositoryUrl) $(SourceYardRepositoryType) $(SourceYardPackageProjectUrl) $(SourceYardCopyright) $(SourceYardDescription) $(SourceYardTitle) $(SourceYardPackageLicenseUrl) $(SourceYardPackageReleaseNotes) $(SourceYardPackageTags) $(SourceYardOwner) $(SourceYardPackageId) --TargetFrameworks &quot;$(TargetFrameworks) &quot; --TargetFramework &quot;$(TargetFramework) &quot; --MultiTargetingPackageInfoFolder &quot;$(_SourceYardMultiTargetingPackageInfoFolder) &quot;">
    </Exec>

    <Message Text="Finish SourceYardStep3"></Message>
  </Target>

  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);_SourceYardClean</CleanDependsOn>
  </PropertyGroup>

  <Target Name="_SourceYardClean">
    <PropertyGroup>
      <_SourcePackingDirectory>$(IntermediateOutputPath)SourcePacking\</_SourcePackingDirectory>
    </PropertyGroup>
    <RemoveDir Directories="$(_SourcePackingDirectory)" />
  </Target>

  <Target Name="SourceYardFalsePackSource" AfterTargets="Build"
          Condition="$(PackSource) == 'False'">
    <Message Text="因为用户设置 PackSource 为 false 所以没有打包源代码"></Message>
  </Target>

</Project>